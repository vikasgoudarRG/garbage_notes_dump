// content
1. C# first iteration


// to do
/*
  > what is type safe?, what does it mean by weakly typed and strong typed
  > record struct
  > patterns while writing to streams
  > read about StringBuilder
  > expand more on properties
  > go more in depth on the topics written
*/



// C# first iteration
structs
  structs are treated as value types
  classes are treated as reference types

  struct struct_name
  {
    // fields
  };
  struct_name struct_obj; // creates a struct instance

  the dot operator is used to access memebrs of a struct instance

classes
  structs are treated as value types
  classes are treated as reference types

  class class_name
  {
    // 
  }

  class_name var; // this does not create an object, it creates a reference that can be used to refer to instances of the class
                  // thus if you try to do var.something now it won't work because it doesn't refer to anything yet
  // so we do
  class_name var = new class_name();

  // since these are reference multiple references can refer to the same object
  class_name var_0;
  calss_name var_1;
  var_0 = new class_name();
  var_1 = var_0; // refer to the same object instance

  // if you loose reference to an object instance, i.e you can't access it anymore it is collected by the garbage collector
  class_name var0 = new class_name();
  var_0 = new class_name();  // the garbage collector will collect the previous object, since no reference to it exists
  {
    class_name var0 = new class_name();
  } // garbage collector collects the object instance when the scope ends

  static memebers cannot access instance valriables, they can access static variables

  overloading constructor
  public classname(param) : this(param) // it is placed before the body of the constructor so that the constructor is called before the body of the overloaded constructor is run
  {
  }

  when we work with normal methods, if we attempt to do something that is not allowed we can return something that signifies error, but since constructors cant return something, the only work around is to throw Exception
  a good way would be 
  public class_name(type0 var0, type1 var1)
  {
    set_methods // which return success status
    set_methods 
    set_methods
    throw new Exception ("error message containing everything from previous operations");
  }

inheritence
  inherits from parent
  class child_class_name : parent_class_name
  {
    // to override methods inherited from parent class
    visibility override return_type method_name (params) {}
      // for this to work the function declaration in the parent class has to be changed slightly
      // virtual keyword has to be added 
      // ex:
      //   in parent class the declaration   
      //   visibility virtual return_type method_name (params) { // code }
      //   virtual simply means the the method can be overriden, it isn't mandated its a possibility

    // to use the parent version of the overriden method
    base.method_name();
      // this is pretty usefull, because we dont want everything in the parent to be protected, sometimes we want them to be private
      // however by declaring them as private we cannot access them 
      // so instead we can have use the methods in the parent class that access these private fields

    // overriding means that we can access both the parent and child version
    // if we implement it without specifying the override keyword it still works, because it considered as a new defination for that method 
    // the compiler will give a warning tho, that can be fixed by defining it by adding keyword `new`
    //  ex:
    //     new return_type method_name(params) { // code }
  }

  sealed
    can be used to prevent class from being used a parent class for future inheritance
    sealed class class_name0 : class_name1, interfaces // class_name0 cannot be used as a parent class for inheritance later on 
    {
    }

    it can also be used with `override` to prevent the method from being overriden in future inherited classes
    sealed override return_type method_name (params)
    {
    }

  constructor in inherited class must call parent constructor because we need to create the parent class as well
  therefore parent constructor must be called before child constructor
    class_name_child : base(params)
    {
    }

  abstract classes
    we cannot make objects of abstract classes
    methods that are marked as abstract in an abstract class must be defined in derived classes 
    // note: not all methods are compulsed to be abstract
    // that is the difference between interfaces and abstract classes, that abstract classes can have some abstract methods and some normal methods
    // abstract classes can have fields as well, constructors as well
    abstract class class_name
    {
      abstract return_type method_name() {} // not defined
      return_type method_name() 
      {
        // code
      }
    }
    we must use override while defining the abstract method in the derived class

interfaces
  public interface interface_name
  {
    return_type method_name(param);
  }
  // when a class implements an Interface it must implement every single method declared in the Interface
  class class_name : interface_name
  {
    // must define each method declared in the interface
  }

  references to interfaces
  we can reference objects in terms of the interfaes that they implements rather than their particular type
  ex:
    Interface_name var = new class_name(); // where class_name implements the interface_name
    var.methods()
    var.properties;   
  > helps in loose coupling, can easily refer to different classes that implement the same interface in different ways, which helps in integration and testing and so on..
  we can use this property to create an array of different classes that implement the same interface
  ex:
    interface_name[] arr_name = new interface_name[num];
    arr[0] = new class_name0(); // that implements interface_name
    arr[1] = new class_name1(); // that implements interface_name

  we can implement multiple interfaces
  class class_name : interface_name0, interface_name1
  {
    // code
  }

object class
  in C#, every classes inherently extends the Object class
  class class_0 {} 
    is
  class class_0 : object {}

  don't confuse that this allows multiple inheritance, by thinking that
  class class_0 : class_1
    is
  class_0 : class_1, object
  WRONG, the order is 
    object <- class_1 <- class_0

  thus an instance of the object class can refer to any class instance, and every instance have some similiar properties that are implemented in the object class
  ex:
    ToString
      returns a string description of the type of the object
      ex:
        object obj = new object();
        Console.WriteLine(obj); // gives System.Object

      this method has also been declared as virtual, so that means we can override this method in our classes, to get the behaviour desired
      ex:
        public overridestring ToString()
        {
          return "hello world!";
        }
        thus when you use Console.WriteLine() on this object, it will print "hello world"

overriding Equals // another method could work as well, but most c# libraries use .Equals()
  class class_name 
  {
    public override bool Equals(object obj) // parameter is object type
    {
      class_name obj_class = (class_name) obj // the type has to cast as a class_name
      // do operation
    }
  }

properties
  if the set method fails the condition
  ex:
    private _propertyName;
    public PropertyName
    {
      get;
      set
      {
        if (value > CONSTANT_VAR)
        {
          _propertyName = value;
        }
    }
  now here if the set method fails, the property wont be set, it will silently move on. which can be a huge problem, one work around is to throw an exception 
  in the code, or rather if you wanna check for such cases better yet just create the tradition get and set methods and return a boolean value or some error code
  

enum
  enum Color
  {
    Red,
    Yellow,
    Green
  };
  Color c;
  c = Color.Red;

streams and file
  C# uses streams to work with files
  stream is link between a program and a data resource
  the C# library converts requests to use streams into commands it passes on to the operating system, the OS does all of the work
  
  defined in System.IO namespace

  Output Stream  
    StreamWriter
    creating stream
      StreamWriter writer = new StreamWriter("File path");
      // If this process fails for any reason, perhaps your operating system is not able/allowed to write to the file or the name is
      // invalid, then the action will fail with an appropriate exception.
      // warning, if file exists it will be overriden

    writing to stream
      writer.WriteLine("sentence")

    closing stream
      writer.CLose()
      forgetting to close can result in
      > can result in data that was meant to be written not be reflected on the file
      > other programs may not be able to access that file
      > keeping open a file takes up some resources, if done in large amounds can eat up significant chunk of resources

  Input Stream
    StreamReader
      creating stream
        StreamReader reader = new StreamReader("file path")
        // If this process fails for any reason, perhaps your operating system is not able/allowed to read to the file or the name is
        // invalid, then the action will fail with an appropriate exception.

      reading from a stream
        reader.ReadLine()
        // every consequent fetches a successive line
        // one all the content of the file is exhausted, ReadLine() keeps returning empty string on every call

        // the file object has a property EndOfFile which is set true when end of file reached
        while (reader.EndOfFile == false) 
        {
          // read 
        }

      closing stream
        reader.Close()
        // similiar errors as writer stream might occur if not closed

case
  multiple case labels can use the same case blocks
  case 1:
  case 2:
    // do something
    break;

try block
  try
  {
  }
  catch (Exception e)
  {
    // e.Message
  }
finally
{
}

throwing error
  throw new Exception("message")

array
  1d
    type[] arr_name = new type[num]

  rectangular array
    type[,] arr_name = new type[num_row, num_col]
    to access a value
      arr_name[row, col]
    cannot access entire row array, have to specify element

  initializing array // an be any type of array
                     // no need to specify size, compiler does it automatically
    type arr_name[] = new type[] 
    {
      // elements .....
     }
    

scope
  unlike some languages like c++, variable with same as in outer scope cannot be declared in inner scope
  ex:
    the following is not allowed
    {
      int i;
      {
        int i;
      }
    }

methods
  named arguemnts
    return_type method_name(type1 name1, type2 name2) {}
    while calling the method we can do
      method_name(name1: value1, name2: value2)
    this has the benefits
      > clearer to read
      > argument order can be change up
    it can be used in case of optional argument
    ex:
      return_type method_name(type0 name0, type1 name1 = default_value_1, type2 name2 = default_value_2) {}
      if we want to only specify value for name2, while keeping name1 as default, we will have to use named arguments because otherwise values 
      are filled in order of optional arguments
      method_name(value0, name2: value2)

  pass by reference
    arguments are by default passed by value, so keyword `ref` can be used
    method defination
      return_type method_name(ref type var_name)
    method call
      method_name(ref var_name)

  out parameter
    it is similar to `ref`
    > method must assign a value to all of the `out` parameters
    > the compiler treats each `out` parameter as un-initialized, so it's value cannot be accessed in the method until defined
    ex;
      method declaration
        return_type method_name(out type0 param0, out type1 param1) {}
      method call
        type0 param0;
        type1 param1; // can be defined as well doesn't matter
        method_name(out param0, out param1);

character
  static methods
    char.IsDigit(char_var) // 0-9
    char.IsLetter(char_var) // a-z || A-Z
    char.IsLetterOrDigit(char_var)
    char.IsLower(char_var)
    char.IsUpper(char_var)
    char.IsPunctuation(char_var)
    char.IsWhiteSpace(char_var) 

string
  string's behaviour is a mix of value type and reference types ngl
  when you create a string in this way
    string str_var = "string literal"
  you create an instance of the string class which is a reference to the string literal
  string string_var0 = "hello world";
  string string_var1 = string_var0;
  both refer to the same string literal

  string string_var0 = "hello"
  string string_var1 = "hello" // both refer to the same string literal

  string string_var0 = new string("hello")
  string string_var1 = new string("hello") // both do not refer to the same string, since we have allocated space for this string 

  strings are immutable in c#, so any changes to a string actually creates a new string and returns it, 
  so "modifying" string_var1 won't cause changes to string_var0 because it just creates a new string and refers to that instead

  it also shows behaviours of a value type
  string_var0 == string_var1 // compares the value of the string of the strings going over it char by char
                             // i.e == is overriden for strings to perform value based comparison rather than reference based comparison
                             // whereas a "normal" reference type would have checked the reference rather than the value

  chars in a string can be accessed via indices
  char char_var = string_var[index];
  but since strings are immutable we cannot change their value by indexing

  string interpolation
    if you add `$` before opening quotes of a string, you can add variables inside the string using curly braces
    ex:
      $"hello {friend_var}"

  verbatim strings
    to decalre string literals with no escape chars or anything
    @"this/ is/a/string literal"

  methods that modify strings, return a new string, they dont make changes to the original string

  // properties
  string has a property Length
    string_var.Length

  // methods
  string has methods to Trim which returns a new modified string
    string_obj = string_var.Trim()
    string_obj = string_var.TrimStart()
    string_obj = string_var.TrimEnd()

  string has method to Replace a substring and return a new modified string
    string_obj = string_var.Replace(old_substr, new_substr)

  string has method to create all upper or all lower case
    string_obj = string_var.ToUpper()
    string_obj = string_var.ToLower()

  string has method to check wether a substring exists, returns a bool value
    bool_obj = string_var.Contains(substring)

  string has method to check wether string StartsWith or EndsWith specified string, return bool value
    bool_obj = string_var.StartsWith(string_instance)
    bool_obj = string_var.EndsWith(string_instance)

  Substring() method
    Substring(index, [length])
      index -> starting index of substring
      length -> optional paramater that specidies length of substring to be taken, if not specified reads till end of string
      // dont request substring that goes beyond the string, that will thorw an Exception

StringBuilder
  found in System.Text namespace
  if you want to be able to modify strings
  

numbers
  // general
  to use `decimals` we need suffix `M`
  ex:
    decimal var = 1.0M

  // properties
  numbers has property MaxValue and MinValue
  ex: int
    int.MaxValue
    int.MinValue
  can do with other types as well like, double, float, int, decimal

types
  all named types are either class or struct types.
  class is a reference type
  struct is a value type
  

  ValueTuple
    these are distinct from system tuples
    ValueTuples are mutable whereas System.Tuple<> are immutable

    Value tuples can have 7 direct elements, to extend, the 8th element has to be a nested tuple

    // general
    declaration syntax
      (Type1 [field_name], Type2 [field_name]) tuple_var = (value1, value2)
      can replace with 
        var tuple_var = (value1, value2) // if field_name isn't going to be mentioned on LHS
      another way to specify the field_name is on RHS
      var tuple_var = (field_name : value_1, field_name : value_2)
  
    if no field_names are specidied, default field_name to access elements are - Item1, Item2 and so on ...
  
    to access elements
    tuple_var.field_name
  
    tuple supports `==` and `!=`
    the tuples must be of the same -arity
    the field_names dont matter, only the values are compared

    tuple supports `=`
    the tuples must be of the same -arity
    to make modifications with can use `with`
    ex:  
      var tuple_var_1 = tuple_var_2 with { field_name = value }
  
    returning tuples from methods
    (type1 [field_name], type2 [field_name]) method() {}

  record (record class and record struct)
    record class or record 
      // general
      records are immutable reference types (immutable only positional records, otherwise possible to make mutable properties) similiar classes but follow value based equality operations
  
      declaration
      public record record_var(type1 field_name, type2 field_2) // this is an example of positional records
                                                                // positional records are immutable as they as similiar to property {get; init;}
                                                                // however it is only shallow immutablility, if the positional parameter is a reference
                                                                // can cannot change the reference itself, but we can change the value being pointed to
      we can declare more memebers which can be more data elements and methods
      ex:
        public record record_var(type1 field_name, type2 field_2) // position records parameters
        {
          type3 field_name {get; set;} // the fields can be mutable, only positional paramaters are strictly immutable
          type3 field_name {get; init;}

          // any methods you want
        }
  
      shallow copying (value based) [with modification]
      record_obj = record_var [with {field1 = value, field_2 = value}] 

    record struct
      // i don't know it 

collection
  List<T>
    // general
    declaration
    ex: List<int> list_var = [1,2,3,4,5]
  
    can access individual elements using square braces
    list_var[index]

    // properties
    number of elements
    list_var.Count

    // methods
    adding and removing
    list_var.Add(element)
    list_var.Remove(element)

    finding the first occurence of an element
    list_var.IndexOf(element) // returns -1 if not found

    sorting
    list_var.Sort()

general structure
  the program starts with the static Main method or top level statements
  only one file can have top level statements
  in case of both top level statements and Main method, compiler generates a warning that the Main method will not be used as an entry point, as the top level statements are taken as the entry point

  each program consists of zero or more namespaces
  each namespace contains types like
    class
    struct
    interface
    delegate
    namespace

  the parameter `string[] args` is optional and depends upon need
  the Main method returns one of the following
    int
    void
    Task<int>
    Task
  
