redis (REmote Dictionary Service)
    it is a high-performance key-value database that runs in memory.
    
    threading architecture
        strictly speaking, the Redis Server is multi-threaded, but its entire request processing flow is handled by a single thread. 
        We must clearly understand this point and not simply think that the entire Redis Server is single-threaded

        Redis doesn’t use multiple threads because most of its operations are not CPU-heavy
        Redis operations are usually fast memory reads/writes or simple network I/O.
        The real bottlenecks are:
            > Memory (not enough RAM)
            > Network (slow or limited bandwidth)

        Multithreading can slow things down if the overhead of managing threads > actual work.
            Redis commands (e.g. GET, SET, INCR) take microseconds.
            Multithreading introduces race conditions, locks, and shared memory issues.
            These problems slow things down because:
                > You now need mutexes/locks to prevent data corruption.
                > Locks cause waiting, which kills the performance benefits.

        why its still fast with single thread for request processing
            > pure memory operation
                Redis is an in-memory database. Its data is all stored in memory, which means that our reading and writing of data are all completed in memory. 
                This speed is very fast.

                Redis is also a key-value in-memory database. It internally constructs a hash table. When accessing according to a specified KEY, 
                the corresponding data can be found with only O(1) time complexity.

            > rich data types
                Redis provides rich data types. You can use different data types for efficient operations according to different scenarios. 
                These operations are all performed in memory and do not consume a large amount of CPU resources, so the speed is extremely fast.

                > String    
                > List      
                > Set        
                > Hash      
                > Zset      
                > Bitmaps     
                > HyperLogLog
                > geo        
                > stream     
            
            > I/O Multiplexing
                Redis uses I/O multiplexing technology and non-blocking I/O.
                    I/O multiplexing -> one thread is responsible for multiple I/O sources
                    non-blocking I/O -> dont wait on a I/O source if it doesn't have data

                the steps
                    > Redis Server is Running at Some Address

                    > Redis Accepts Multiple TCP Connections Through Clients: 
                        As various clients, which could be applications or services, want to interact with Redis, 
                        they establish TCP connections. Now a network socket is established between redis and the client. 
                        A network socket is a virtual communication channel between the client and Redis. 
                        It’s like a two-way street where data can flow in both directions.

                    > Without I/O Multiplexing: 
                        To read data from a network socket, Redis initiates a read() system call . 
                        This read system call, functioning as an I/O operation, is characterised by its blocking nature, 
                        meaning Redis’s single-threaded process will wait on the associated TCP connection until data becomes available to read. 
                        This data typically consists of requests and corresponding data sent by clients to Redis. 
                        This blocking behaviour implies that Redis, with its single-threaded nature, would be confined to processing only one TCP connection at a time. 
                        The Redis server’s thread would wait on a specific client’s connection until data is ready to be read 
                        and thus there would be no point of accepting multiple connections.

                    > With I/O Multiplexing
                        I/O multiplexing allows Redis to monitor multiple connections simultaneously without blocking its main thread. 
                        Instead of waiting for data on a single connection, Redis can keep an eye on multiple connections at once.

                        Redis uses the select() or poll() system call to register interest in multiple sockets (connections) simultaneously.
                        These calls allow it to specify a set of sockets it wants to monitor for specific events, such as readiness to read.

                        Redis’s single thread invokes the select() or poll() system call and enters a state of waiting for events. 
                        instead, it awaits notifications about events on the registered sockets and process the requests from the ready sockets one at a time.
                        During this time, Redis is not actively processing any specific connection

                        When an event occurs on any of the registered sockets (e.g., data becomes available for reading), the select() or poll() call returns. 
                        The return value indicates which sockets experienced events, allowing Redis to identify where data is ready to be processed

                        i.e. waiting for events rather than blocking on individual sockets

                        Its core idea is that through a system call (such as select, poll, epoll, etc.), 
                        the program can simultaneously block and wait for the ready state of multiple I/O operations. 
                        When one or more descriptors are ready, the system call returns and tells the program which descriptors are ready for I/O operations. 
                        then the program can perform corresponding I/O processing for these ready descriptors.
                
                        Because of this, Redis can listen to requests from multiple Sockets in a single thread. When any Socket is readable/writable, 
                        Redis reads the client request, operates the corresponding data in memory, and then writes it back to the Socket.

        As mentioned before, 
        Redis Server is multi threaded
            the request processing flow is handled by a single thread
            
            Apart from the request processing flow being handled by a single thread, there are other worker threads inside Redis that execute in the background.

            They are responsible for asynchronously executing certain relatively time-consuming tasks. 
            For example, AOF flushing every second and AOF file rewriting are completed in another thread.
            AOF Flushing (every second)
                Redis buffers write commands in memory.
                Every second, it writes (flushes) these to the Append-Only File (AOF) on disk.
                This writing to disk is slow, so it's done in a separate thread.

            AOF File Rewriting
                Over time, the AOF file gets large.
                Redis rewrites/compacts it to keep it small and efficient.
                This rewriting is a heavy task, so it’s also done asynchronously in another thread.
            
            Deleting large keys can be time-consuming because freeing up memory takes effort. 
            By default, this process happens in Redis's main thread, which can block other operations and hurt performance. 
            However, Redis offers an asynchronous memory release mechanism. If properly configured and used with specific commands (like UNLINK), 
            Redis can offload these tasks to background threads—allowing the main thread to stay responsive and improving overall performance.


        Single threading has disadvantages as well
            The biggest disadvantage of single-threaded processing is that if a previous request takes a long time to operate, 
            then the entire Redis will be blocked and other requests cannot enter until this time-consuming operation is completed and returned. 
            Only then can other requests be processed.

            Therefore, when using Redis, we must avoid very time-consuming operations.
            For example, 
                obtaining data in a way with too high time complexity
                obtaining too much data at one time
                a large number of keys expiring

How are the five common Redis data types implemented internally?
    1. Internal Implementation of String Type
        The underlying data structure implementation of the String type is mainly SDS (Simple Dynamic String)
        SDS is not quite the same as the C string
            > SDS can not only save text data, but also binary data
                Because SDS judges whether the string ends by using the value of the len attribute instead of the null character,
                The actual string data (or binary data) is stored inside a byte array called buf[]
                Redis treats the contents of buf[] as raw binary data, not as null-terminated C strings.
                
                Binary-safe:
                    SDS can store any bytes, including \0 (null bytes), which normal C strings treat as "end of string".
                
                Therefore, SDS can not only store text data, but also can save binary data such as pictures, audio, video, and compressed files.
            
            > The time complexity of SDS to obtain the string length is O(1)
                Because the string of C language does not record its own length, the complexity of obtaining the length is O(n); 
                while the len attribute in the SDS structure records the string length, so the complexity is O(1).
            
            > The SDS API of Redis is safe, and concatenating strings will not cause buffer overflow. 
                Because SDS will check whether the SDS space meets the requirements before concatenating strings. 
                If the space is not enough, it will automatically expand, so it will not lead to the problem of buffer overflow.

    2. Internal Implementation of List Type
        The underlying data structure of the List type is implemented by doubly linked list or ziplist:
        However, after Redis version 3.2, the underlying data structure of the List data type is only implemented by quicklist, replacing the doubly linked list and ziplist.

        If the number of elements in the list is less than 512 (default value, configurable by list-max-ziplist-entries), 
        and the value of each element in the list is less than 64 bytes (default value, configurable by list-max-ziplist-value), 
        Redis will use ziplist as the underlying data structure of the List type;
                    
        If the elements of the list do not meet the above conditions, Redis will use doubly linked list as the underlying data structure of the List type;

        ziplist
            A ziplist is a compact, binary-encoded, contiguous block of memory used to store multiple entries (like strings or integers) in Redis.
            Each element can be of different size
            Each entry has metadata, Includes the length of the previous entry, encoding info, and length of current entry, 
            so Redis can traverse forward and backward without pointers.
            Redis avoids pointers to save space.
                Instead of storing memory addresses (prev, next), each entry stores:
                The length of the previous entry
                The length of the current entry
            That way, Redis can jump forward by "skip X bytes", or backward by "go back Y bytes"

            Limitations
                Adding/removing elements in the middle requires shifting memory, since everything is in one block.

        quicklist
            A quicklist is a linked list of ziplists.
            Each node in the quicklist is a ziplist, allowing Redis to:
                Keep memory usage low (ziplist)
                Support fast inserts/removals (linked list)
    
    3. Internal Implementation of Hash Type
        The underlying data structure of the Hash type is implemented by ziplist or hash table
        In Redis 7.0, the ziplist data structure has been deprecated and replaced by the listpack data structure to implement it.
            istpack 
                is also a contiguous block of memory, just like ziplist.But Redis redesigned it to make it efficient.

        If the number of elements of the Hash type is less than 512 (default value, configurable by hash-max-ziplist-entries), 
        and all values are less than 64 bytes (default value, configurable by hash-max-ziplist-value), 
        Redis will use ziplist as the underlying data structure of the Hash type;

        If the elements of the Hash type do not meet the above conditions, Redis will use hash table as the underlying data structure of the Hash type.

        Scenario: You use a Hash in Redis
            HSET user:1 name "Alice"
            HSET user:1 age "25"

            This creates a Hash type called user:1 with two fields:
                {
                "name": "Alice",
                "age": "25"
                }

            Redis can store this hash in two different internal ways based on size and content.

            When Redis Uses a Ziplist
                Redis will not use a real hash table if:
                    The number of field-value pairs is ≤ 512 (default limit)
                    Each field name and value is ≤ 64 bytes

                Instead, it stores the data as a flat array of bytes (ziplist) like this:
                    ["name", "Alice", "age", "25"]

                Example lookup (HGET user:1 age):
                    Redis starts scanning from the beginning:
                        Sees "name" -> not a match -> skip next (which is "Alice")
                        Sees "age" -> match!
                        Return the next entry -> "25"
            
            When Redis Uses a Hashtable
                Once the data grows:
                    More than 512 fields, or
                    A field or value exceeds 64 bytes
                
                Redis automatically switches the internal encoding from ziplist to a proper hashtable.
    
    4. Internal Implementation of Set Type
        The underlying data structure of the Set type is implemented by hash table or integer set:

        If all the elements in the set are integers and the number of elements is less than 512 (default value, configurable by set-maxintset-entries), 
        Redis will use integer set as the underlying data structure of the Set type;
            intset
                An intset (Integer Set) is an internal data structure used by Redis to store a set of unique integers in a sorted, compact array.
                | Encoding | Length | [Entry1] [Entry2] [Entry3] ... |
                    Encoding: Tells Redis the bit size used for each integer (16-bit, 32-bit, or 64-bit)
                    Length: How many integers are stored
                
                the reasong we keep all entry as same size as opposed to ziplist, is for speed,
                    entry_address = base_address + n * size_of_each_integer
                this allows for more efficient algos like binary-search

        If the elements in the set do not meet the above conditions, then Redis uses hash table as the underlying data structure of the Set type.
    
    5. Internal Implementation of ZSet Type (Rank based Sorted Set)    
        The underlying data structure of the ZSet type is implemented by ziplist or skip list:
        In Redis 7.0, the ziplist data structure has been deprecated and replaced by the listpack data structure to implement it.
       
        If the number of elements of the ordered set is less than 128 and the value of each element is less than 64 bytes, 
        Redis will use ziplist as the underlying data structure of the ZSet type;

        If the elements of the ordered set do not meet the above conditions, 
        Redis will use skip list as the underlying data structure of the ZSet type.

        ill be honest, im not going to pretend i know how skip-set works
    
String Type
    It is the most basic key-value structure, where the key is the unique identifier and the value is the specific value.
    
    "String" are actually are really just byte arrays — like this:
        [ 0x31, 0x32, 0x33 ]

    stored internally as int and SDS (Simple Dynamic String) [byte array thingy].

    You can interpret those bytes however you want:
        As text ("123")
        As a number (123)
        As binary data (e.g., part of a JPEG file)
        Redis itself doesn’t care what the value means - until you use a command that interprets it a certain way.

    Regarding the encoding convenience, there are 3 kinds of internal encoding (encoding) of the string object: int, raw, and embstr, 
    and the relationship is as  
        







            